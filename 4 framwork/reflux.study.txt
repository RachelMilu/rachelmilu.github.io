http://segmentfault.com/a/1190000002793786?utm_source=tuicool

http://segmentfault.com/a/1190000002499052

reflux主要提供了四个函数：

joinLeading: 只响应第一次emit出来的，在完成一次trigger前，剩下的emission不管了。
joinTrailing: 在一次trigger前，无视最后一次emission出来的数据。
joinConcat: 在一次trigger前，保存所有emission的数据。
joinStrict: 如果在一次trigger之前多次emit，抛异常。

https://github.com/reflux/refluxjs

最好是“One Store, One Component”；
“Single File For Actions”；
http://henleyedition.com/building-an-app-using-react-and-refluxjs/



http://www.tuicool.com/articles/JJN3uq3
http://blog.jeffdouglas.com/2015/04/03/building-spas-with-react-reflux-for-salesforce/
这里面有个demo https://github.com/jeffdonthemic/react-banners-salesforce

一个简单的demo：

##scoreAction.js:
var Reflux = require('reflux');

var ScoresActions = Reflux.createActions({
    'editArray': {},
    'push': {}
});

module.exports = ScoresActions;


##scoresStore.js
var Reflux = require('reflux');
var actions = require('./scoreActions');

var ScoresStore = Reflux.createStore({
    items: [0,0,0,0,0],
    init: function () {
        this.listenTo(actions.editArray, this.editArray);
        this.listenTo(actions.push, this.push);
    },
    editArray: function (i,value) {
        console.log(i,"--->",value)
    },
    push:function(value){
        console.log(value);
    }
});

module.exports = ScoresStore;

##compnonent/index.js
require('./index.less');
var React = require('react');
var Reflux = require('reflux');
var ScoresStore = require('../store/scoresStore');
var ScoresActions = require('../store/scoreActions');


var QuestionPage = React.createClass({
    getInitialState: function () {
        var self = this;
        $(document).on("scoreUpdated",function(){
            self.setState({
                scoreRs: self.props.scorers
            });
        });
        return {
            scoreRs: this.props.scorers,
        }
    },
    handleClick: function(e) {
      ScoresActions.editArray($(e.target).data("questionid"),$(e.target).data("score"));
    },
    componentDidMount: function(){
    },
    componentDidUpdate:function(){
    },
    submitHandler: function(e){
    },
    
    getElem: function(questionId){
    },

    render: function () {
        return (
            <div className={"page page-question page-question-" + this.props.question.id}>
              
            </div>
        );
    }
});

module.exports = QuestionPage;





