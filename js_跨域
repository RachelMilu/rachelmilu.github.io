我所知道的解决跨域问题的办法：
1.jsonp
原理：
step1，前端创建script标记，设置src，添加到head中（你可以往body中添加）。

step2，后台返回一个js变量jsonp，这个jsonp就是请求后的JSON数据。

step3，回调完成后删除script标记（还有一些清理工作如避免部分浏览器内存泄露等）。

2.在请求头中设置 Access-Control-Allow-Origin
原理：
只有当目标页面（服务端）的response中，包含了 Access-Control-Allow-Origin 这个header，
并且它的值里有我们自己的域名（客户端的域名）时，浏览器才允许我们拿到它页面的数据进行下一步处理。如：
Access-Control-Allow-Origin: http://rachelmilu.github.io

如果它的值设为 * ，则表示谁都可以用：
Access-Control-Allow-Origin: *

栗子：
	var userInfo={ userId:"111111"};  
    
	   $.ajax({   
	        type: 'GET', 
	        data: userInfo,
	        url: 'http://localhost:8080/HyTE-Java/ws/login/loginOut',
	        dataType: 'json',  
	        beforeSend: function(xhr)
	        {
	        	xhr.setRequestHeader('Authorization','bearer'+access_token);
	        	xhr.setRequestHeader("Access-Control-Allow-Origin", "*");
		      	xhr.setRequestHeader("Access-Control-Allow-Methods", "GET");
	    	  	xhr.setRequestHeader("Access-Control-Max-Age", "60");
	        	console.log('test');
	        },
	        success: function(userInfo){  
	        },   
	        error:function(userInfo){
		     }  
		});
		
据说还有许多办法，看这个帖子：
http://www.cnblogs.com/snandy/archive/2011/05/03/2034229.html

摘抄：
“
1，iframe
2，document.domain
3，window.name
4，script
5，XDomainRequest (IE8+)
6，XMLHTTPRequest (Firefox3.5+)
7，postMessage (HTML5)
8，后台代理
”
